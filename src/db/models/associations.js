// src/db/models/associations.js
import { Hotel } from './hotel.js';
import {User} from './user.js';
import {Staff} from './staff.js';
import { Customer } from './customer.js';
import {Room} from './room.js';

import { Checkin } from './checkin.js';
import {Payment} from './payment.js';
import {ServiceRequest} from './service_request.js';
import  { Inventory } from './inventory.js';
import { MaintenanceLog } from './maintenance_logs.js';
import { HousekeepingSchedule } from './housekeeping_schedule.js';
import { Feedback } from './feedback.js';
import  { Report } from './reports.js';
import { Integration}  from './integrations.js';
import {Notification} from './notifications.js';
import { Booking } from './booking.js';

export function defineAssociations() {
  // üè® Hotel has many Staff, Rooms, Customers, Bookings
  Hotel.hasMany(Staff, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Staff.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Room, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Room.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Customer, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Customer.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Booking, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Booking.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Payment, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Payment.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(ServiceRequest, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  ServiceRequest.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Inventory, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Inventory.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(MaintenanceLog, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  MaintenanceLog.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(HousekeepingSchedule, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  HousekeepingSchedule.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Feedback, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Feedback.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Report, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Report.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Integration, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Integration.belongsTo(Hotel, { foreignKey: 'hotelId' });

  Hotel.hasMany(Notification, { foreignKey: 'hotelId', onDelete: 'CASCADE' });
  Notification.belongsTo(Hotel, { foreignKey: 'hotelId' });

  // üë• Staff created by a User (optional)
  User.hasMany(Staff, { foreignKey: 'createdBy', onDelete: 'SET NULL' });
  Staff.belongsTo(User, { as: 'creator', foreignKey: 'createdBy' });

  // üß≥ Bookings
  Customer.hasMany(Booking, { foreignKey: 'customerId', onDelete: 'CASCADE' });
  Booking.belongsTo(Customer, { foreignKey: 'customerId' });

  Room.hasMany(Booking, { foreignKey: 'roomId', onDelete: 'SET NULL' });
  Booking.belongsTo(Room, { foreignKey: 'roomId' });

  // üè† Check-in linked to Booking + Customer + Room
  Booking.hasOne(Checkin, { foreignKey: 'bookingId', onDelete: 'CASCADE' });
  Checkin.belongsTo(Booking, { foreignKey: 'bookingId' });

  Checkin.belongsTo(Customer, { foreignKey: 'customerId' });
  Checkin.belongsTo(Room, { foreignKey: 'roomId' });

  // üíµ Payments linked to Booking & Customer
  Booking.hasMany(Payment, { foreignKey: 'bookingId', onDelete: 'CASCADE' });
  Payment.belongsTo(Booking, { foreignKey: 'bookingId' });

  Customer.hasMany(Payment, { foreignKey: 'customerId', onDelete: 'CASCADE' });
  Payment.belongsTo(Customer, { foreignKey: 'customerId' });

  // üßæ Feedback linked to Customer + Booking
  Customer.hasMany(Feedback, { foreignKey: 'customerId', onDelete: 'CASCADE' });
  Feedback.belongsTo(Customer, { foreignKey: 'customerId' });

  Booking.hasOne(Feedback, { foreignKey: 'bookingId', onDelete: 'SET NULL' });
  Feedback.belongsTo(Booking, { foreignKey: 'bookingId' });

  // üßπ Housekeeping linked to Staff + Room
  Staff.hasMany(HousekeepingSchedule, { foreignKey: 'staffId', onDelete: 'SET NULL' });
  HousekeepingSchedule.belongsTo(Staff, { foreignKey: 'staffId' });

  Room.hasMany(HousekeepingSchedule, { foreignKey: 'roomId', onDelete: 'SET NULL' });
  HousekeepingSchedule.belongsTo(Room, { foreignKey: 'roomId' });

  // üõ†Ô∏è Maintenance logs by Staff
  Staff.hasMany(MaintenanceLog, { foreignKey: 'staffId', onDelete: 'SET NULL' });
  MaintenanceLog.belongsTo(Staff, { foreignKey: 'staffId' });

  Room.hasMany(MaintenanceLog, { foreignKey: 'roomId', onDelete: 'SET NULL' });
  MaintenanceLog.belongsTo(Room, { foreignKey: 'roomId' });

  // üßæ Reports generated by Staff or System
  Staff.hasMany(Report, { foreignKey: 'generatedBy', onDelete: 'SET NULL' });
  Report.belongsTo(Staff, { as: 'generator', foreignKey: 'generatedBy' });

  // üì≤ Service Requests ‚Äî created by Customer, handled by Staff
  Customer.hasMany(ServiceRequest, { foreignKey: 'customerId', onDelete: 'CASCADE' });
  ServiceRequest.belongsTo(Customer, { foreignKey: 'customerId' });

  Staff.hasMany(ServiceRequest, { foreignKey: 'assignedTo', onDelete: 'SET NULL' });
  ServiceRequest.belongsTo(Staff, { as: 'assignedStaff', foreignKey: 'assignedTo' });

  // üîî Notifications ‚Äî can belong to a User or Customer
  User.hasMany(Notification, { foreignKey: 'userId', onDelete: 'SET NULL' });
  Notification.belongsTo(User, { foreignKey: 'userId' });

  Customer.hasMany(Notification, { foreignKey: 'customerId', onDelete: 'SET NULL' });
  Notification.belongsTo(Customer, { foreignKey: 'customerId' });

  console.log('‚úÖ All associations defined successfully');
}
